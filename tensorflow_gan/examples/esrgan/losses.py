# coding=utf-8
# Copyright 2021 The TensorFlow GAN Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os 
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import tensorflow as tf
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR) 

def pixel_loss(y_true, y_pred):
  """ To calculate the L1 Loss.
  Args :
      y_true : Original HR image present in the dataset.
      y_pred : Image generated by the generator network.
  Returns :
      Mean absolute difference between the two images.
  """
  y_true = tf.cast(y_true, tf.float32)
  y_pred = tf.cast(y_pred, tf.float32)
  return tf.reduce_mean(tf.reduce_mean(tf.abs(y_true - y_pred), axis=0))


def relativistic_avg_loss_g(discriminator):
  """  To calculate the adversarial loss for generator
       network using a relativistic discriminator. 
  Args : 
      discriminator : The Discriminator network. 
  Returns: 
      Adversarial loss for generator network. 
  """
  def get_logits(x, y):
    return discriminator(x) - tf.reduce_mean(discriminator(y))

  def loss(real_image, generated_image):
    """
    Args: 
        real_image : Real HR Image present in the dataset. 
        generated_image: Images generated by the generator network.  
    """
    real_logits = get_logits(real_image, generated_image)
    fake_logits = get_logits(generated_image, real_image)
    
    real_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(
        labels=tf.zeros_like(real_logits), logits=real_logits))  
    fake_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(
        labels=tf.ones_like(fake_logits), logits=fake_logits))

    return real_loss + fake_loss
  
  return loss

def relativistic_avg_loss_d(discriminator):
  """  To calculate the adversarial loss for discriminator
       network using a relativistic discriminator. 
  Args : 
      discriminator : The Discriminator network. 
  Returns: 
      Adversarial loss for discriminator network. 
  """
  def get_logits(x, y):
    return discriminator(x) - tf.reduce_mean(discriminator(y))

  def loss(real_image, generated_image):
    """
    Args: 
        real_image : Real HR Image present in the dataset. 
        generated_image: Images generated by the generator network.  
    """
    real_logits = get_logits(real_image, generated_image)
    fake_logits = get_logits(generated_image, real_image)

    real_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(
          labels=tf.ones_like(real_logits), logits=real_logits))
    fake_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(
        labels=tf.zeros_like(fake_logits), logits=fake_logits))

    return real_loss + fake_loss

  return loss

def vgg_loss(weight=None, input_shape=None):
  """ Perceptual Loss calculation using pre-trained VGG19
      model before activation as mentioned in the paper.
  Args:
      weights: Weights to be loaded.
      input_shape: Shape of input image.

  Returns :
      Perceptual loss
  """
  vgg_model = tf.keras.applications.vgg19.VGG19(
      input_shape=input_shape, weights=weight, include_top=False
  )

  for layer in vgg_model.layers:
    layer.trainable = False

  vgg_model.get_layer("block5_conv4").activation = lambda x: x
  vgg = tf.keras.Model(
      inputs=[vgg_model.input],
      outputs=[vgg_model.get_layer("block5_conv4").output])

  def loss(y_true, y_pred):
    return tf.compat.v1.losses.absolute_difference(vgg(y_true), vgg(y_pred))

  return loss
